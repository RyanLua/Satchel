{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>Satchel is a modern open-source alternative to Roblox's default backpack.</p> <p>Satchel aims to be more customizable and easier to use than the default backpack while still having a \"vanilla\" feel. Installation of Satchel is as simple as dropping the module into your game and setting up a few properties if you like to customize it. It has a familiar feel and structure as to the default backpack for ease of use for both developers and players.</p> <p>This documentation will allow you to install Satchel and learn about how to script using Satchel.</p> <ul> <li> <p> Fast and easy installation</p> <p>Drag and drop installation from the Creator Store or GitHub Releases</p> <p> Installation</p> </li> <li> <p> Full device support</p> <p>Compatible with computer, phone, tablet, console, and VR</p> <p> Platforms</p> </li> <li> <p> Highly customizable</p> <p>Change colors, fonts, and more using instance attributes</p> <p> Customization</p> </li> <li> <p> Free and open-source</p> <p>Open source for everyone to use and available on GitHub</p> <p> License</p> </li> </ul>"},{"location":"#our-sponsors","title":"Our Sponsors","text":"<p>Special thanks for our sponsors for supporting Satchel and it's future development. We distribute Satchel and provide updates for free, for anyone to use or modify.</p> <p> </p> <p> Sponsor Satchel</p>"},{"location":"alternatives/","title":"Alternatives","text":"<p>Satchel isn't the best backpack system out there or the only one but it does offer some advantages against others.</p>"},{"location":"alternatives/#purse","title":"Purse","text":"<p>Purse is a sub project of Satchel and a fork on the CoreGui backpack. It tries to be as close as possible to the default backpack while Satchel tries to be an improvement over it.</p>"},{"location":"alternatives/#pros","title":"Pros","text":"<ul> <li>Easy to install, drag and drop installation</li> <li>Well documented</li> <li>Full platform support</li> </ul>"},{"location":"alternatives/#cons","title":"Cons","text":"<ul> <li>Requires scripting knowledge to customize</li> <li>No new features over default backpack</li> </ul>"},{"location":"alternatives/#neohotbar","title":"NeoHotbar","text":"<p>Neobar is a modern hotbar-only system that acts as a great alternative to Satchel if you are looking for a hotbar only. Made on a strong foundation and well-built, Neobar is a powerful tool with unparalleled customization and API.</p>"},{"location":"alternatives/#pros_1","title":"Pros","text":"<ul> <li>Easy to install, drag and drop installation</li> <li>Powerful and highly customizable interface</li> <li>Well documented</li> <li>Full platform support</li> </ul>"},{"location":"alternatives/#cons_1","title":"Cons","text":"<ul> <li>Requires scripting knowledge to customize</li> <li>No instance attributes</li> <li>Hotbar system only</li> </ul>"},{"location":"alternatives/#reinvent","title":"ReInvent","text":"<p>ReInvent is an older-style hotbar and inventory system that is made completely separate from the backpack core scripts. ReInvent is no longer supported and lacks proper documentation and developer-facing APIs.</p>"},{"location":"alternatives/#pros_2","title":"Pros","text":"<ul> <li>Easy to install, drag and drop installation</li> <li>Animated interface</li> <li>Backpack and hotbar system</li> </ul>"},{"location":"alternatives/#cons_2","title":"Cons","text":"<ul> <li>Computer and mobile platforms only</li> <li>Poor documentation</li> <li>Discontinued</li> </ul>"},{"location":"api-reference/","title":"API Reference","text":"<p>Satchel is a reskin of the default BackpackGui located in CoreGui. Satchel acts very similar to the default backpack and is based on a fork on the default backpack. Behaviors between the two should remain the same with both of them managing the Backpack.</p>"},{"location":"api-reference/#summary","title":"Summary","text":""},{"location":"api-reference/#attributes","title":"Attributes","text":"Attribute Description Default BackgroundColor3: <code>Color3</code> Determines the background color of the default inventory window and slots. <code>[25, 27, 29]</code> BackgroundTransparency: <code>number</code> Determines the background transparency of the default inventory window and slots. 0.3 CornerRadius: <code>UDim</code> Determines the radius, in pixels, of the default inventory window and slots. <code>0, 8</code> EquipBorderColor3: <code>Color3</code> Determines the color of the equip border when a slot is equipped. <code>[255, 255, 255]</code> EquipBorderSizePixel: <code>number</code> Determines the pixel width of the equip border when a slot is equipped. <code>5</code> FontFace: <code>Font</code> Determines the font of the default inventory window and slots. <code>Builder Sans</code> InsetIconPadding: <code>boolean</code> Determines whether or not the tool icon is padded in the default inventory window and slots. True OutlineEquipBorder: <code>boolean</code> Determines whether or not the equip border is outline or inset when a slot is equipped. True TextColor3: <code>Color3</code> Determines the color of the text in default inventory window and slots. <code>[255, 255, 255]</code> TextSize: <code>number</code> Determines the size of the text in the default inventory window and slots. <code>14</code> TextStrokeColor3: <code>Color3</code> Determines the color of the text stroke of text in default inventory window and slots. <code>[0, 0, 0]</code> TextStrokeTransparency: <code>number</code> Determines the transparency of the text stroke of text in default chat window and slots. 0.5"},{"location":"api-reference/#methods","title":"Methods","text":"IsOpened(): <code>boolean</code> Returns whether the inventory is opened or not. SetBackpackEnabled(enabled: boolean): <code>void</code> Sets whether the backpack gui is enabled or disabled. GetBackpackEnabled(): <code>boolean</code> Returns whether the backpack gui is enabled or disabled. GetStateChangedEvent(): <code>RBXScriptSignal</code> Returns a signal that fires when the inventory is opened or closed."},{"location":"api-reference/#attributes_1","title":"Attributes","text":""},{"location":"api-reference/#backgroundcolor3","title":"BackgroundColor3","text":"<p><code>Color3</code></p> <p>Determines the background color of the default inventory window and slots. Changing this will update the background color for all elements excluding the search box background for visibility purposes.</p>"},{"location":"api-reference/#backgroundtransparency","title":"BackgroundTransparency","text":"<p><code>number</code></p> <p>Determines the background transparency of the default inventory window and slots. This will change how the hot bar looks in its locked state and the inventory background.</p>"},{"location":"api-reference/#cornerradius","title":"CornerRadius","text":"<p><code>UDim</code></p> <p>Determines the radius, in pixels, of the default inventory window and slots. This will affect all elements with a visible rounded corner. The corner radius for the search bar is calculated automatically based on this value.</p>"},{"location":"api-reference/#equipbordercolor3","title":"EquipBorderColor3","text":"<p><code>Color3</code></p> <p>Determines the color of the equip border when a slot is equipped. The drag outline color of the slot will not changed by this.</p>"},{"location":"api-reference/#equipbordersizepixel","title":"EquipBorderSizePixel","text":"<p><code>number</code></p> <p>Determines the pixel width of the equip border when a slot is equipped. This additionally controls the padding of tool icons.</p>"},{"location":"api-reference/#fontface","title":"FontFace","text":"<p><code>Enum.Font</code></p> <p>Determines the font of the default inventory window and slots. This includes all text in the Satchel UI.</p> <p>Bug</p> <p>Rojo does not support the Font instance attribute so the it will not be synced. You may add the attribute manually if you wish to adjust the font.</p>"},{"location":"api-reference/#inseticonpadding","title":"InsetIconPadding","text":"<p><code>bool</code></p> <p>Determines whether or not the tool icon is padded in the default inventory window and slots. Changing this will change how the tool icon is padded in the slot or not.</p>"},{"location":"api-reference/#outlineequipborder","title":"OutlineEquipBorder","text":"<p><code>bool</code></p> <p>Determines whether or not the equip border is outline or inset when a slot is equipped. Changing this will make the equip border either border will outline or inset the slot.</p>"},{"location":"api-reference/#textcolor3","title":"TextColor3","text":"<p><code>Color3</code></p> <p>Determines the color of the text in default inventory window and slots. This will change the color of all text.</p>"},{"location":"api-reference/#textsize","title":"TextSize","text":"<p><code>number</code></p> <p>Determines the size of the text in the default inventory window and slots. This will change the text size of the tool names and will not change other text like search text, hotkey number, and gamepad hints.</p>"},{"location":"api-reference/#textstrokecolor3","title":"TextStrokeColor3","text":"<p><code>Color3</code></p> <p>Determines the color of the text stroke of text in default inventory window and slots. This will change the color of all text strokes which are visible.</p>"},{"location":"api-reference/#textstroketransparency","title":"TextStrokeTransparency","text":"<p><code>number</code></p> <p>Determines the transparency of the text stroke of text in default chat window and slots. This will change all text strokes in which text strokes are visible.</p>"},{"location":"api-reference/#methods_1","title":"Methods","text":""},{"location":"api-reference/#isopened","title":"IsOpened","text":"<p>Returns whether the inventory is opened or not.</p>"},{"location":"api-reference/#returns","title":"Returns","text":"bool"},{"location":"api-reference/#setbackpackenabled","title":"SetBackpackEnabled","text":"<p>Sets whether the backpack gui is enabled or disabled.</p>"},{"location":"api-reference/#code-samples","title":"Code Samples","text":"<p>This code sample will disable the backpack gui.</p> Disable Backpack<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal Satchel = require(ReplicatedStorage.Satchel)\n\nSatchel.SetBackpackEnabled(false)\n</code></pre>"},{"location":"api-reference/#parameters","title":"Parameters","text":"enabled: bool Whether to enable or disable the Backpack"},{"location":"api-reference/#returns_1","title":"Returns","text":"void"},{"location":"api-reference/#getbackpackenabled","title":"GetBackpackEnabled","text":"<p>Returns whether the backpack gui is enabled or disabled.</p>"},{"location":"api-reference/#code-samples_1","title":"Code Samples","text":"<p>This code sample makes a TextButton that toggles the inventory when clicked.</p> Toggle Satchel<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal Satchel = require(ReplicatedStorage.Satchel)\n\nlocal button = Instance.new(\"TextButton\")\nbutton.AnchorPoint = Vector2.new(0.5, 0.5)\nbutton.Position = UDim2.new(0.5, 0, 0.5, 0)\nbutton.Text = \"Toggle Inventory\"\nbutton.MouseButton1Click:Connect(function()\n    if Satchel:GetBackpackEnabled() then\n        Satchel.SetBackpackEnabled(false)\n    else\n        Satchel.SetBackpackEnabled(true)\n    end\nend)\n</code></pre>"},{"location":"api-reference/#returns_2","title":"Returns","text":"bool"},{"location":"api-reference/#getstatechangedevent","title":"GetStateChangedEvent","text":"<p>Returns a signal that fires when the inventory is opened or closed.</p>"},{"location":"api-reference/#code-samples_2","title":"Code Samples","text":"<p>This code sample detects when the inventory is opened or closed.</p> Detect Inventory State<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal Satchel = require(ReplicatedStorage.Satchel)\n\nSatchel.GetStateChangedEvent():Connect(function(isOpened: boolean)\n    if isOpened then\n        print(\"Inventory opened\")\n    else\n        print(\"Inventory closed\")\n    end\nend)\n</code></pre>"},{"location":"api-reference/#returns_3","title":"Returns","text":"RBXScriptSignal"},{"location":"installation/","title":"Installation","text":"<p>Installing Satchel is easy and painless. Satchel is a drag-and-drop module that works out of the box and with no configuration needed.</p> <p>Tip</p> <p>While Satchel can run anywhere because it uses RunContext, it is recommeneded to parent Satchel to <code>ReplicatedStorage</code> for best practices and organizational reasons.</p>"},{"location":"installation/#creator-store","title":"Creator Store recommended","text":"<ol> <li> <p>Get the Satchel model from the Creator Store.</p> <p></p> </li> <li> <p>Open Roblox Studio and create a new place or open an existing place.</p> </li> <li> <p>From the View tab, open the Toolbox and select the Inventory tab.</p> <p></p> <p></p> </li> <li> <p>Locate the Satchel model and click it, or drag-and-drop it into the 3D view.</p> <p></p> </li> <li> <p>In the Explorer window, move the Satchel model into <code>ReplicatedStorage</code>.</p> </li> </ol>"},{"location":"installation/#github-releases","title":"GitHub Releases","text":"<ol> <li> <p>Download the <code>Satchel.rbxm</code> or <code>Satchel.rbxmx</code> model file from GitHub Releases.</p> <p>Info</p> <p>Binary (<code>.rbxm</code>) and XML (<code>.rbxmx</code>) model files contain the exact same model. <code>.rbxm</code> is a smaller file size to download.</p> <p></p> </li> <li> <p>Open Roblox Studio and create a new place or open an existing place.</p> </li> <li> <p>In the Explorer window, insert Satchel into <code>ReplicatedStorage</code>.</p> <p></p> </li> <li> <p>Select the Satchel model file you downloaded from GitHub.</p> </li> </ol>"},{"location":"installation/#wally","title":"Wally","text":"<p>You are expected to already have Wally setup in your Rojo project and basic knowledge on how to use Wally packages.</p> <ol> <li> <p>Open your Rojo project in the code editor of your choice.</p> </li> <li> <p>In the <code>wally.toml</code> file, add the latest Wally version for Satchel. Your dependencies should look similar to this:</p> wally.toml<pre><code>[dependencies]\nsatchel = \"ryanlua/satchel@1.0.0\"\n</code></pre> </li> <li> <p>Install Satchel from Wally by running <code>wally install</code>.</p> </li> </ol>"},{"location":"introduction/","title":"Introduction","text":"<p>Welcome to Satchel, if you don't know already, Satchel acts as a modern refresh of the default Roblox backpack UI with a lot of improvements in place.</p> <p>Satchel and its documentation is always a work in progress but you can help too. Learn how to change the code for Satchel or just click the edit documentation icon and fix some grammar.</p> <p>Just want to use Satchel? Check out Installation.</p>"},{"location":"introduction/#improvements","title":"Improvements","text":"<ul> <li>Modernized and refreshed UI</li> <li>Customization using instance attributes</li> <li>Methods and events, previously locked to CoreGui</li> <li>Script readability and type improvements</li> <li>Rojo sync and Wally support</li> </ul> <p>All open source and free for you to use in your own Roblox experiences.</p>"},{"location":"introduction/#satchel-over-default","title":"Satchel over Default","text":"<p>While the default backpack does its job, customizing the UI or editing the script is extremely difficult. Did you know that the backpack they are using today is from 2015? (With lots of bandaids and patches of course.) Satchel acts as a modernized version that aims to be much more friendly while still maintaining as many features and compatibility.</p>"},{"location":"introduction/#coregui-relation","title":"CoreGui Relation","text":"<p>From a scripting perspective, Satchel is more of an advanced fork of the CoreGui with Satchel borrowing a majority of its codebase from the default. It's not entirely copy and paste job though. Type annotations and performance optimizations set Satchel apart along with its number of UI tweaks and refactors in place.</p>"},{"location":"platforms/","title":"Platforms","text":"<p>We support all platforms that Roblox supports. Computers, phones, tablets, consoles, and VR are all supported by Satchel right out of the box. Where the default backpack should run, so should Satchel.</p> <p>Note</p> <p>Do you see a bug specific to a platform? Open a bug report we'll look into it.</p>"},{"location":"platforms/#current-supported-devices","title":"Current supported devices","text":"<p>All platforms on Roblox are supported by Satchel, limited only by screen size. Below is a list of devices along with the accompanying interface and minimum screen size.</p>"},{"location":"platforms/#computer","title":"Computer","text":"<p>Support for all computers with 1024 x 768px or larger.</p> <ul> <li>1024 x 768px minimum display size</li> <li>Desktop interface</li> <li>10 hotbar slots</li> </ul>"},{"location":"platforms/#phone","title":"Phone","text":"<p>Support for Apple iPhone 5 (568 x 320px) or newer.</p> <ul> <li>568 x 320px minimum display size</li> <li>Mobile interface</li> <li>6 hotbar slots</li> </ul>"},{"location":"platforms/#tablet","title":"Tablet","text":"<p>Support for Apple iPad 2 (1024 x 768px) or newer.</p> <ul> <li>1024 x 768px minimum display size</li> <li>Mobile interface</li> <li>10 or 6 hotbar slots (Depending on display size)</li> </ul>"},{"location":"platforms/#console","title":"Console","text":"<p>Support for Xbox and PlayStation. Specialized ten-foot interface and hint UI for controllers. Hint UI will automatically adapt to the correct controller buttons.</p> <ul> <li>Ten-foot interface</li> <li>Controller context hint UI</li> <li>10 hotbar slots</li> </ul>"},{"location":"platforms/#vr","title":"VR","text":"<p>VR including Valve Index, Meta Quest 2 and above, and similar.</p> <ul> <li>Adapted mobile interface</li> <li>Controller context hint UI</li> <li>Custom VR inventory controls</li> <li>6 hotbar slots</li> </ul>"},{"location":"usage/","title":"Usage","text":"<p>Use of Satchel after installation very easy. Just publish your experience to Roblox and see Satchel live in action.</p> <p>To learn how to install Satchel, see Installation.</p> <p>Note</p> <p>Please see API Reference for more details on attributes, methods, and events for Satchel and how to use Satchel to it's full potential.</p>"},{"location":"usage/#customization","title":"Customization","text":"<p>Satchel is highly customizable &amp; adjustable with instance attributes support allowing you to customize the behavior and appearance of over 10+ attributes.</p> <p>Some of the attributes include:</p> <ul> <li>Text Color, Size, Stroke Color &amp; Transparency</li> <li>Background Color &amp; Transparency</li> <li>Equip Border Color &amp; Thickness</li> <li>Corner Radius</li> <li>Font</li> </ul> <p>More attributes can be found in the API Reference. The list above is not exhaustive and there are may more attributes available for customization.</p> <p> </p> Example of customization using instance attributes"},{"location":"usage/#scripting","title":"Scripting","text":"<p>Satchel offers methods and events for scripting purposes. In the below code example we will use the <code>SetBackpackEnabled</code> method to disable the Satchel. The script expects the Satchel module to be in <code>ReplicatedStorage</code>.</p> Disable Backpack<pre><code>local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\n\nlocal Satchel = require(ReplicatedStorage.Satchel)\n\nSatchel.SetBackpackEnabled(false)\n</code></pre> <p>For the full API reference, see API Reference for more details on attributes, methods, and events for Satchel and how to use Satchel to it's full potential.</p>"}]}